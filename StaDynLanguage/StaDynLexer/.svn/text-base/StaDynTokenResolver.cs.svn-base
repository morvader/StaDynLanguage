using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Parser;
using antlr;
using System.IO;
using StaDynLanguage;

public class StaDynTokenResolver {

    public const int parameterListStartChar = CSharpLexer.OPEN_PAREN;
    public const int parameterListEndChar = CSharpLexer.CLOSE_PAREN;
    public const int parameterNextChar = CSharpLexer.COMMA;
    public const int parameterAccesMemberChar = CSharpLexer.DOT;

    private IDictionary<int, StaDynTokenTypes> tokenTypes = new Dictionary<int, StaDynTokenTypes> {
            {CSharpLexer.EOF, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Nl, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Lt, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Zs, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Ll, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Lu, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Lo, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Lm, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Mn, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Mc, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Nd, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Pc, StaDynTokenTypes.String},
            //{CSharpLexer.UNICODE_CLASS_Cf, StaDynTokenTypes.String},
            {CSharpLexer.TRUE, StaDynTokenTypes.Keyword},
            {CSharpLexer.FALSE, StaDynTokenTypes.Keyword},
            {CSharpLexer.DEFAULT, StaDynTokenTypes.Keyword}, 
            {CSharpLexer.PP_DEFINE, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_UNDEFINE, StaDynTokenTypes.Keyword}, 
            {CSharpLexer.PP_COND_IF, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_COND_ELIF, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_COND_ELSE, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_COND_ENDIF, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_LINE, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_ERROR, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_WARNING, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_REGION, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_ENDREGION, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_FILENAME, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_IDENT, StaDynTokenTypes.Identifier},
            {CSharpLexer.PP_STRING, StaDynTokenTypes.Keyword},
            {CSharpLexer.PP_NUMBER, StaDynTokenTypes.Keyword},
            {CSharpLexer.WHITESPACE, StaDynTokenTypes.WhiteSpace},
            {CSharpLexer.QUOTE, StaDynTokenTypes.String},
            {CSharpLexer.OPEN_PAREN, StaDynTokenTypes.Operator},
            {CSharpLexer.CLOSE_PAREN, StaDynTokenTypes.Operator},
            {CSharpLexer.LOG_NOT, StaDynTokenTypes.Operator},
            {CSharpLexer.LOG_AND, StaDynTokenTypes.Operator},
            {CSharpLexer.LOG_OR, StaDynTokenTypes.Operator},
            {CSharpLexer.EQUAL, StaDynTokenTypes.Operator},
            {CSharpLexer.NOT_EQUAL, StaDynTokenTypes.Operator},
            {CSharpLexer.SL_COMMENT, StaDynTokenTypes.Comment},
            {CSharpLexer.NEWLINE, StaDynTokenTypes.Delimiter},
            {CSharpLexer.NOT_NEWLINE, StaDynTokenTypes.Delimiter},
            {CSharpLexer.NON_NEWLINE_WHITESPACE, StaDynTokenTypes.Delimiter},
            {CSharpLexer.UNICODE_ESCAPE_SEQUENCE, StaDynTokenTypes.Text},
            {CSharpLexer.DECIMAL_DIGIT, StaDynTokenTypes.Literal},
            {CSharpLexer.HEX_DIGIT, StaDynTokenTypes.Literal},
            {CSharpLexer.LETTER_CHARACTER, StaDynTokenTypes.String},
            {CSharpLexer.DECIMAL_DIGIT_CHARACTER, StaDynTokenTypes.String},
            {CSharpLexer.CONNECTING_CHARACTER, StaDynTokenTypes.String},
            {CSharpLexer.COMBINING_CHARACTER, StaDynTokenTypes.String},
            {CSharpLexer.FORMATTING_CHARACTER, StaDynTokenTypes.String},
            {CSharpLexer.ABSTRACT, StaDynTokenTypes.Keyword},
            {CSharpLexer.AS, StaDynTokenTypes.Keyword},
            {CSharpLexer.BASE, StaDynTokenTypes.Keyword},
            {CSharpLexer.BOOL, StaDynTokenTypes.Keyword},
            {CSharpLexer.BREAK, StaDynTokenTypes.Keyword},
            {CSharpLexer.BYTE, StaDynTokenTypes.Keyword},
            {CSharpLexer.CASE, StaDynTokenTypes.Keyword},
            {CSharpLexer.CATCH, StaDynTokenTypes.Keyword},
            {CSharpLexer.CHAR, StaDynTokenTypes.Keyword},
            {CSharpLexer.CHECKED, StaDynTokenTypes.Keyword}, 
            {CSharpLexer.CLASS, StaDynTokenTypes.Keyword},
            {CSharpLexer.CONST, StaDynTokenTypes.Keyword},
            {CSharpLexer.CONTINUE, StaDynTokenTypes.Keyword},
            {CSharpLexer.DECIMAL, StaDynTokenTypes.Keyword}, 
            {CSharpLexer.DELEGATE, StaDynTokenTypes.Keyword},
            {CSharpLexer.DO, StaDynTokenTypes.Keyword},
            {CSharpLexer.DOUBLE, StaDynTokenTypes.Keyword},
            {CSharpLexer.ELSE, StaDynTokenTypes.Keyword},
            {CSharpLexer.ENUM, StaDynTokenTypes.Keyword},
            {CSharpLexer.EVENT, StaDynTokenTypes.Keyword},
            {CSharpLexer.EXPLICIT, StaDynTokenTypes.Keyword},
            {CSharpLexer.EXTERN, StaDynTokenTypes.Keyword},
            {CSharpLexer.FINALLY, StaDynTokenTypes.Keyword},
            {CSharpLexer.FIXED, StaDynTokenTypes.Keyword},
            {CSharpLexer.FLOAT, StaDynTokenTypes.Keyword},
            {CSharpLexer.FOR, StaDynTokenTypes.Keyword},
            {CSharpLexer.FOREACH, StaDynTokenTypes.Keyword},
            {CSharpLexer.GOTO, StaDynTokenTypes.Keyword},
            {CSharpLexer.IF, StaDynTokenTypes.Keyword},
            {CSharpLexer.IMPLICIT, StaDynTokenTypes.Keyword},
            {CSharpLexer.IN, StaDynTokenTypes.Keyword},
            {CSharpLexer.INT, StaDynTokenTypes.Keyword},
            {CSharpLexer.INTERFACE, StaDynTokenTypes.Keyword},
            {CSharpLexer.INTERNAL, StaDynTokenTypes.Keyword},
            {CSharpLexer.IS, StaDynTokenTypes.Keyword},
            {CSharpLexer.LOCK, StaDynTokenTypes.Keyword},
            {CSharpLexer.LONG, StaDynTokenTypes.Keyword},
            {CSharpLexer.NAMESPACE, StaDynTokenTypes.Keyword},
            {CSharpLexer.NEW, StaDynTokenTypes.Keyword},
            {CSharpLexer.NULL, StaDynTokenTypes.Keyword},
            {CSharpLexer.OBJECT, StaDynTokenTypes.Keyword},
            {CSharpLexer.OPERATOR, StaDynTokenTypes.Keyword},
            {CSharpLexer.OUT, StaDynTokenTypes.Keyword},
            {CSharpLexer.OVERRIDE, StaDynTokenTypes.Keyword},
            {CSharpLexer.PARAMS, StaDynTokenTypes.Keyword},
            {CSharpLexer.PRIVATE, StaDynTokenTypes.Keyword},
            {CSharpLexer.PROTECTED, StaDynTokenTypes.Keyword},
            {CSharpLexer.PUBLIC, StaDynTokenTypes.Keyword},
            {CSharpLexer.READONLY, StaDynTokenTypes.Keyword},
            {CSharpLexer.REF, StaDynTokenTypes.Keyword},
            {CSharpLexer.RETURN, StaDynTokenTypes.Keyword},
            {CSharpLexer.SBYTE, StaDynTokenTypes.Keyword},
            {CSharpLexer.SEALED, StaDynTokenTypes.Keyword},
            {CSharpLexer.SHORT, StaDynTokenTypes.Keyword},
            {CSharpLexer.SIZEOF, StaDynTokenTypes.Keyword},
            {CSharpLexer.STACKALLOC, StaDynTokenTypes.Keyword},
            {CSharpLexer.STATIC, StaDynTokenTypes.Keyword},
            {CSharpLexer.STRING, StaDynTokenTypes.Keyword},
            {CSharpLexer.STRUCT, StaDynTokenTypes.Keyword},
            {CSharpLexer.SWITCH, StaDynTokenTypes.Keyword},
            {CSharpLexer.THIS, StaDynTokenTypes.Keyword},
            {CSharpLexer.THROW, StaDynTokenTypes.Keyword},
            {CSharpLexer.TRY, StaDynTokenTypes.Keyword},
            {CSharpLexer.TYPEOF, StaDynTokenTypes.Keyword},
            {CSharpLexer.UINT, StaDynTokenTypes.Keyword},
            {CSharpLexer.ULONG, StaDynTokenTypes.Keyword},
            {CSharpLexer.UNCHECKED, StaDynTokenTypes.Keyword},
            {CSharpLexer.UNSAFE, StaDynTokenTypes.Keyword},
            {CSharpLexer.USHORT, StaDynTokenTypes.Keyword},
            {CSharpLexer.USING, StaDynTokenTypes.Keyword},
            {CSharpLexer.VIRTUAL, StaDynTokenTypes.Keyword},
            {CSharpLexer.VOID, StaDynTokenTypes.Keyword},
            {CSharpLexer.VOLATILE, StaDynTokenTypes.Keyword},
            {CSharpLexer.WHILE, StaDynTokenTypes.Keyword},
            {CSharpLexer.VAR, StaDynTokenTypes.Keyword},
            {CSharpLexer.DOT, StaDynTokenTypes.Keyword},
            {CSharpLexer.UINT_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.LONG_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.ULONG_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.DECIMAL_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.FLOAT_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.DOUBLE_LITERAL, StaDynTokenTypes.Literal},
            //{CSharpLexer.LITERAL_add, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_remove, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_get, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_set, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_assembly, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_field, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_method, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_module, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_param, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_property, StaDynTokenTypes.String},
            //{CSharpLexer.LITERAL_type, StaDynTokenTypes.String},
            {CSharpLexer.ML_COMMENT, StaDynTokenTypes.LineComment},
            {CSharpLexer.IDENTIFIER, StaDynTokenTypes.Identifier},
            {CSharpLexer.INT_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.CHAR_LITERAL, StaDynTokenTypes.Literal},
            {CSharpLexer.STRING_LITERAL, StaDynTokenTypes.String},
            {CSharpLexer.ESCAPED_LITERAL, StaDynTokenTypes.String},
            {CSharpLexer.OPEN_CURLY, StaDynTokenTypes.Operator},
            {CSharpLexer.CLOSE_CURLY, StaDynTokenTypes.Operator},
            {CSharpLexer.OPEN_BRACK, StaDynTokenTypes.Operator},
            {CSharpLexer.CLOSE_BRACK, StaDynTokenTypes.Operator},
            {CSharpLexer.COMMA, StaDynTokenTypes.Delimiter},
            {CSharpLexer.COLON, StaDynTokenTypes.Operator},
            {CSharpLexer.SEMI, StaDynTokenTypes.Delimiter},
            {CSharpLexer.PLUS, StaDynTokenTypes.Operator},
            {CSharpLexer.MINUS, StaDynTokenTypes.Operator},
            {CSharpLexer.STAR, StaDynTokenTypes.Operator},
            {CSharpLexer.DIV, StaDynTokenTypes.Operator},
            {CSharpLexer.MOD, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_AND, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_OR, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_XOR, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_NOT, StaDynTokenTypes.Operator},
            {CSharpLexer.ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.LTHAN, StaDynTokenTypes.Operator},
            {CSharpLexer.GTHAN, StaDynTokenTypes.Operator},
            {CSharpLexer.QUESTION, StaDynTokenTypes.Operator},
            {CSharpLexer.INC, StaDynTokenTypes.Operator},
            {CSharpLexer.DEC, StaDynTokenTypes.Operator},
            {CSharpLexer.SHIFTL, StaDynTokenTypes.Operator},
            {CSharpLexer.SHIFTR, StaDynTokenTypes.Operator},
            {CSharpLexer.LTE, StaDynTokenTypes.Operator},
            {CSharpLexer.GTE, StaDynTokenTypes.Operator},
            {CSharpLexer.PLUS_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.MINUS_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.STAR_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.DIV_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.MOD_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_AND_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_OR_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.BIN_XOR_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.SHIFTL_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.SHIFTR_ASSIGN, StaDynTokenTypes.Operator},
            {CSharpLexer.DEREF, StaDynTokenTypes.Operator},
            //{CSharpLexer.PP_DIRECTIVE, StaDynTokenTypes.String},
    };

    // * Singleton
    private StaDynTokenResolver() { }
    private static StaDynTokenResolver instance = new StaDynTokenResolver();
    public static StaDynTokenResolver Instance
    {
        get { return instance; }
    }

    public StaDynTokenTypes getTokenType(int tokenType) {
        if (!this.tokenTypes.Keys.Contains(tokenType))
            // * Default Token Type
            return StaDynTokenTypes.Text;
        return this.tokenTypes[tokenType];
    }

}
