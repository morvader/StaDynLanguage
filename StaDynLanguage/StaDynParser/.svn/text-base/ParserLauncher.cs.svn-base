using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.Text;
using StaDynLanguage.StaDynAST;
using StaDynLanguage.Errors;
using StaDynLanguage.Utils;
using StaDynLanguage;

namespace StaDynLanguage
{
    /// <summary>
    /// Executes the parsing when the text buffer changes.
    /// </summary>
    internal sealed class ParserLauncher
    {
        //Parse complete statements only
        private string[] parseTriggers = {";","}","\n","\r\n"};

        private ITextBuffer textBuffer;
        internal StaDynParser Parser { get; private set; }

        internal ParserLauncher(ITextBuffer textBuffer, string fileName)
        {

            this.textBuffer = textBuffer;
            this.Parser = new StaDynParser(textBuffer, fileName);

            textBuffer.Changed += new EventHandler<TextContentChangedEventArgs>(TextBuffer_Changed);

            Parse();
        }

        private void TextBuffer_Changed(object source, TextContentChangedEventArgs e)
        {
            //Try to parse "correct" code only
            //Its more probably when user ends an statement
            string lastChar = e.Changes.Last().NewText;
            if (this.parseTriggers.Contains(lastChar)) 
                Parse();
        }

        private void Parse()
        {
            StaDynSourceFileAST sourceFile = this.Parser.parseSource();
            //Add or replace AST
            //ProjectFileAST.Instance.addOrReplaceAst(sourceFile);
            //DecorateAST.Instance.completeDecorateAndUpdate(sourceFile.FileName, true);
            DecorateAST.Instance.completeDecorateAndUpdate(sourceFile);

            //Refresh highligting if no erros
            if (StaDynErrorList.Instance.errorCount() == 0)
            {
                SourceHelper.refreshHighlighting();

                //StaDynTokenTagger tagger = new StaDynTokenTagger(textBuffer);
                //tagger.refreshHighlighting(textBuffer);
            }
          
           
        }
    }
}